name: Test and Build Rust

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --allow unknown-lints --deny warnings

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - uses: actions/checkout@v4
      - run: cargo fmt --check --verbose

  clippy:
    name: Clippy ${{ matrix.toolchain }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ (matrix.toolchain == 'beta') || (matrix.toolchain == 'nightly') }}
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - beta
          - nightly
    env:
      RUSTFLAGS: --deny warnings
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: clippy-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          path: target/
      - run: cargo fetch --locked
      - run: cargo clippy --offline --all-features --all-targets
      - run: cargo doc --offline --all-features --no-deps

  features:
    name: Features ${{ matrix.toolchain }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - beta
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack

      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: features-${{ matrix.toolchain }}-${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}
          path: target/
      - run: cargo fetch --locked

      - name: Check all targets
        run: cargo hack --keep-going --feature-powerset check --all-targets --offline

      - name: Check without dev dependencies
        run: cargo hack --keep-going --feature-powerset --no-dev-deps check --offline

  msrv: # minimum supported Rust version
    name: MSRV ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: msrv-${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}
          path: target/
      - run: cargo fetch --locked
      - run: cargo hack --keep-going --feature-powerset --no-dev-deps --rust-version check --offline

  test:
    name: Test ${{ matrix.toolchain }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - beta
          - nightly
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: test-${{ matrix.toolchain }}-${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}
          path: target/
      - run: cargo fetch --locked
      - run: cargo build --offline --all-features --all-targets
      - run: cargo test --offline --all-features

  release:
    name: Release ${{ matrix.triple }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - triple: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rpm: true
          - triple: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            rpm: true
          - triple: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            rpm: true
          - triple: arm-unknown-linux-gnueabihf
            os: ubuntu-latest
          - triple: riscv64gc-unknown-linux-gnu
            os: ubuntu-latest

          - triple: x86_64-apple-darwin
            os: macos-latest
          - triple: aarch64-apple-darwin
            os: macos-latest

          - triple: x86_64-pc-windows-msvc
            os: windows-latest
          - triple: aarch64-pc-windows-msvc
            os: windows-latest
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.triple }}

      - name: Install cargo tools
        if: runner.os == 'Linux'
        uses: taiki-e/install-action@v2
        with:
          tool: cross,cargo-deb,cargo-generate-rpm

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set artifact name
        shell: bash
        run: |
          version="$(git describe --tags --match "v*.*.*" --always)"
          echo "version: $version"
          echo "GIT_TAG_VERSION=$version" >> $GITHUB_ENV

          name="rust-binary-metafile-template-$version-${{ matrix.triple }}"
          echo "artifact: $name"
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          key: release-${{ matrix.triple }}-${{ hashFiles('**/Cargo.lock') }}
          path: target/
      - run: cargo fetch --locked

      - name: Build
        run: ${{ runner.os == 'Linux' && 'cross' || 'cargo' }} build --release --offline --target ${{ matrix.triple }}

      - name: Package tar.gz (*nix)
        if: runner.os != 'Windows'
        run: >
          tar -cv
          CHANGELOG.md LICENSE README.md
          systemd
          -C target/ completions/ -C ../
          -C target/ manpages/ -C ../
          -C target/${{ matrix.triple }}/release/ rust-binary-metafile-template
          | gzip --best > ${{ env.ARTIFACT_NAME }}.tar.gz
      - name: Package zip (Windows)
        if: runner.os == 'Windows'
        run: >
          7z a ${{ env.ARTIFACT_NAME }}.zip
          CHANGELOG.md LICENSE README.md
          ./target/completions/
          ./target/manpages/
          ./target/${{ matrix.triple }}/release/rust-binary-metafile-template.exe
      - name: Package deb
        if: runner.os == 'Linux'
        run: cargo deb --no-build --no-strip --target ${{ matrix.triple }} --output ${{ env.ARTIFACT_NAME }}.deb
      - name: Package rpm
        if: matrix.rpm
        run: cargo generate-rpm --auto-req disabled --target ${{ matrix.triple }} --output ${{ env.ARTIFACT_NAME }}.rpm

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.triple }}
          path: |
            *.deb
            *.rpm
            *.tar.gz
            *.zip

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.deb
            *.rpm
            *.tar.gz
            *.zip
